version: 2
jobs:
  staging:
    docker:
    - image: anas9011/tarteel-deploy:0.0.5
    working_directory: ~/tarteel
    environment:
    - DEV_DB: true
    steps:
    - checkout
    - run:
        name: Change bin directory owner to circleci
        command: sudo chown -R circleci:circleci /usr/local/bin
    - run:
        name: Change pkgs directory owner to circleci
        command: sudo chown -R circleci:circleci /usr/local/lib/python3.6/site-packages
    - restore_cache:
        keys:
        - v1-py-cache-{{ checksum "requirements.txt" }}
    - run:
        name: Install dependencies
        command: |
          pip install virtualenv
          virtualenv ~/te
          echo "source ~/te/bin/activate" >> $BASH_ENV
          source $BASH_ENV
          pip install -r requirements.txt
    - run:
        name: Decrypt
        command: echo "$GIT_CRYPT_KEY" | base64 --decode > git-crypt.key && git-crypt
          unlock git-crypt.key
    - run:
        name: Migrate DB
        command: python manage.py makemigrations && python manage.py migrate
    - run:
        name: Update staging API
        command: zappa update dev
    - save_cache:
        paths:
        - ~/venv
        key: v1-py-cache-{{ checksum "requirements.txt" }}
  production:
    docker:
    - image: anas9011/tarteel-deploy:0.0.5
    working_directory: ~/tarteel
    environment:
    - PROD_DB: true
    steps:
    - checkout
    - run:
        name: Change bin directory owner to circleci
        command: sudo chown -R circleci:circleci /usr/local/bin
    - run:
        name: Change pkgs directory owner to circleci
        command: sudo chown -R circleci:circleci /usr/local/lib/python3.6/site-packages
    - restore_cache:
        keys:
        - v1-py-cache-{{ checksum "requirements.txt" }}
    - run:
        name: Install dependencies
        command: |
          pip install virtualenv
          virtualenv ~/te
          echo "source ~/te/bin/activate" >> $BASH_ENV
          source $BASH_ENV
          pip install -r requirements.txt
    - run:
        name: Decrypt
        command: echo "$GIT_CRYPT_KEY" | base64 --decode > git-crypt.key && git-crypt
          unlock git-crypt.key
    - run:
        name: Open access to DB
        command: |
          public_ip_address=$(wget -qO- http://checkip.amazonaws.com)
          aws ec2 authorize-security-group-ingress --region $AWS_DEFAULT_REGION --group-id $AWS_SG_ID \
          --ip-permissions "[{\"IpProtocol\": \"tcp\", \"FromPort\": 5432, \"ToPort\": 5432, \"IpRanges\": [{\"CidrIp\": \"${public_ip_address}/32\", \"Description\": \"CircleCI\"}]}]"
    - run:
        name: Migrate DB
        command: python manage.py makemigrations && python manage.py migrate
    - run:
        name: Update staging API
        command: zappa update prod
    - run:
        name: Close access to DB
        command: |
          aws ec2 revoke-security-group-ingress --group-id $AWS_SG_ID \
          --protocol tcp --port 5432 --cidr $public_ip_address/32
    - save_cache:
        paths:
        - ~/venv
        key: v1-py-cache-{{ checksum "requirements.txt" }}
workflows:
  version: 2
  deployment:
    jobs:
    - staging:
        filters:
          branches:
            only:
            - develop
            - anas/ci
    - production:
        filters:
          branches:
            only: master

# Original config.yml file:
# version: 2.1
# 
# commands:
#   deploy-flow:
#     description: \"Run migrations and the Zappa update command.\"
#     parameters:
#       stage:
#         type: string
#         default: dev
#     steps:
#       - checkout
#       - run: sudo chown -R circleci:circleci /usr/local/bin
#       - run: sudo chown -R circleci:circleci /usr/local/lib/python3.6/site-packages
#       - restore_cache:
#           keys:
#             - v1-py-cache-{{ checksum \"requirements.txt\" }}
#       - run:
#           name: Install dependencies
#           command: |
#             pip install virtualenv
#             virtualenv ~/te
#             echo \"source ~/te/bin/activate\" >> $BASH_ENV
#             source $BASH_ENV
#             pip install -r requirements.txt
#       - run:
#           name: Decrypt
#           command: echo \"$GIT_CRYPT_KEY\" | base64 --decode > git-crypt.key && git-crypt unlock git-crypt.key
#       - run:
#           name: Migrate DB
#           command: python manage.py makemigrations && python manage.py migrate
#       - run:
#           name: Update staging API
#           command: zappa update << parameters.stage >>
#       - save_cache:
#           paths:
#             - ~/venv
#           key: v1-py-cache-{{ checksum \"requirements.txt\" }}
# 
# executors:
#   tarteel-exec:
#     docker:
#       - image: anas9011/tarteel-deploy:0.0.5
#     working_directory: ~/tarteel
# 
# jobs:
#   # Run the Django test suite
#   testing:
#     executor: tarteel-exec
#     environment:
#       LOCAL_DB: true
#     steps:
#       - checkout
#       - run: sudo chown -R circleci:circleci /usr/local/bin
#       - run: sudo chown -R circleci:circleci /usr/local/lib/python3.6/site-packages
#       - restore_cache:
#           keys:
#             - v1-dependencies-{{ checksum \"requirements.txt\" }}
#       - run:
#           name: Install dependencies
#           command: |
#             pip install virtualenv
#             virtualenv ~/te
#             echo \"source ~/te/bin/activate\" >> $BASH_ENV
#             source $BASH_ENV
#             pip install -r requirements.txt
#       - run:
#           name: Decrypt
#           command: echo \"$GIT_CRYPT_KEY\" | base64 --decode > git-crypt.key && git-crypt unlock git-crypt.key
#       - run:
#           name: Django tests
#           command: python manage.py test
#       - save_cache:
#           paths:
#             - ~/venv
#           key: v1-py-cache-{{ checksum \"requirements.txt\" }}
#       - store_artifacts:
#           path: /tmp/artifacts
#   # Use Zappa to deploy to staging
#   staging:
#     executor: tarteel-exec
#     environment:
#       DEV_DB: true
#     steps:
#       - deploy-flow:
#           stage: dev
#   # Use Zappa to deploy to production
#   production:
#     executor: tarteel-exec
#     environment:
#       PROD_DB: true
#     steps:
#       - deploy-flow:
#           stage: prod
# 
# workflows:
#   version: 2
#   deployment:
#     jobs:
# #      - testing
#       - staging:
#           filters:
#             branches:
#               only:
#                 - develop
#                 - anas/ci
#       - production:
#           filters:
#             branches:
#               only: master